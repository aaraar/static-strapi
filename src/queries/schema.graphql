# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR
type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  published_at: DateTime
  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionPublished_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionTitle {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  title: [CategoryConnectionTitle]
  published_at: [CategoryConnectionPublished_at]
}

input CategoryInput {
  title: String!
  restaurants: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type ComponentAtomsExternalLink {
  id: ID!
  url: String!
  text: String!
}

input ComponentAtomsExternalLinkInput {
  url: String!
  text: String!
}

type ComponentPageComponentHeader {
  id: ID!
  title: String!
  image: UploadFile
  subtitle: String!
  link: ComponentAtomsExternalLink
}

input ComponentPageComponentHeaderInput {
  title: String!
  image: ID
  subtitle: String!
  link: ComponentAtomsExternalLinkInput!
}

type ComponentPageComponentTestimonial {
  id: ID!
  avatar: UploadFile
  title: String!
  body: String
}

input ComponentPageComponentTestimonialInput {
  avatar: ID
  title: String!
  body: String
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Pages
}

input createRestaurantInput {
  data: RestaurantInput
}

type createRestaurantPayload {
  restaurant: Restaurant
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

# A date string, such as 2007-12-03, compliant with the `full-date` format
# outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
# representation of dates and times using the Gregorian calendar.
scalar Date

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
# 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Pages
}

input deleteRestaurantInput {
  where: InputID
}

type deleteRestaurantPayload {
  restaurant: Restaurant
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCategoryInput {
  title: String
  restaurants: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editComponentAtomsExternalLinkInput {
  id: ID
  url: String
  text: String
}

input editComponentPageComponentHeaderInput {
  id: ID
  title: String
  image: ID
  subtitle: String
  link: editComponentAtomsExternalLinkInput
}

input editComponentPageComponentTestimonialInput {
  id: ID
  avatar: ID
  title: String
  body: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editPageInput {
  Title: String
  components: [PagesComponentsDynamicZoneInput!]
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRestaurantInput {
  title: String
  description: String
  categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# The `Long` scalar type represents 52-bit integers
scalar Long

union Morph =
    UsersPermissionsMe
  | UsersPermissionsMeRole
  | UsersPermissionsLoginPayload
  | UserPermissionsPasswordPayload
  | Category
  | CategoryConnection
  | CategoryAggregator
  | CategoryGroupBy
  | CategoryConnectionId
  | CategoryConnectionCreated_at
  | CategoryConnectionUpdated_at
  | CategoryConnectionTitle
  | CategoryConnectionPublished_at
  | createCategoryPayload
  | updateCategoryPayload
  | deleteCategoryPayload
  | Pages
  | PagesConnection
  | PagesAggregator
  | PagesGroupBy
  | PagesConnectionId
  | PagesConnectionCreated_at
  | PagesConnectionUpdated_at
  | PagesConnectionTitle
  | PagesConnectionSlug
  | PagesConnectionPublished_at
  | createPagePayload
  | updatePagePayload
  | deletePagePayload
  | Restaurant
  | RestaurantConnection
  | RestaurantAggregator
  | RestaurantGroupBy
  | RestaurantConnectionId
  | RestaurantConnectionCreated_at
  | RestaurantConnectionUpdated_at
  | RestaurantConnectionTitle
  | RestaurantConnectionDescription
  | RestaurantConnectionPublished_at
  | createRestaurantPayload
  | updateRestaurantPayload
  | deleteRestaurantPayload
  | UploadFile
  | UploadFileConnection
  | UploadFileAggregator
  | UploadFileAggregatorSum
  | UploadFileAggregatorAvg
  | UploadFileAggregatorMin
  | UploadFileAggregatorMax
  | UploadFileGroupBy
  | UploadFileConnectionId
  | UploadFileConnectionCreated_at
  | UploadFileConnectionUpdated_at
  | UploadFileConnectionName
  | UploadFileConnectionAlternativeText
  | UploadFileConnectionCaption
  | UploadFileConnectionWidth
  | UploadFileConnectionHeight
  | UploadFileConnectionFormats
  | UploadFileConnectionHash
  | UploadFileConnectionExt
  | UploadFileConnectionMime
  | UploadFileConnectionSize
  | UploadFileConnectionUrl
  | UploadFileConnectionPreviewUrl
  | UploadFileConnectionProvider
  | UploadFileConnectionProvider_metadata
  | deleteFilePayload
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsRoleConnection
  | UsersPermissionsRoleAggregator
  | UsersPermissionsRoleGroupBy
  | UsersPermissionsRoleConnectionId
  | UsersPermissionsRoleConnectionName
  | UsersPermissionsRoleConnectionDescription
  | UsersPermissionsRoleConnectionType
  | createRolePayload
  | updateRolePayload
  | deleteRolePayload
  | UsersPermissionsUser
  | UsersPermissionsUserConnection
  | UsersPermissionsUserAggregator
  | UsersPermissionsUserGroupBy
  | UsersPermissionsUserConnectionId
  | UsersPermissionsUserConnectionCreated_at
  | UsersPermissionsUserConnectionUpdated_at
  | UsersPermissionsUserConnectionUsername
  | UsersPermissionsUserConnectionEmail
  | UsersPermissionsUserConnectionProvider
  | UsersPermissionsUserConnectionConfirmed
  | UsersPermissionsUserConnectionBlocked
  | UsersPermissionsUserConnectionRole
  | createUserPayload
  | updateUserPayload
  | deleteUserPayload
  | ComponentAtomsExternalLink
  | ComponentPageComponentHeader
  | ComponentPageComponentTestimonial
type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createRestaurant(input: createRestaurantInput): createRestaurantPayload
  updateRestaurant(input: updateRestaurantInput): updateRestaurantPayload
  deleteRestaurant(input: deleteRestaurantInput): deleteRestaurantPayload
  # Delete one file
  deleteFile(input: deleteFileInput): deleteFilePayload
  # Create a new role
  createRole(input: createRoleInput): createRolePayload
  # Update an existing role
  updateRole(input: updateRoleInput): updateRolePayload
  # Delete an existing role
  deleteRole(input: deleteRoleInput): deleteRolePayload
  # Create a new user
  createUser(input: createUserInput): createUserPayload
  # Update an existing user
  updateUser(input: updateUserInput): updateUserPayload
  # Delete an existing user
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(
    refId: ID
    ref: String
    field: String
    source: String
    file: Upload!
  ): UploadFile!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    source: String
    files: [Upload]!
  ): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

input PageInput {
  Title: String!
  components: [PagesComponentsDynamicZoneInput!]
  slug: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Pages {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  components: [PagesComponentsDynamicZone]
  slug: String!
  published_at: DateTime
}

type PagesAggregator {
  count: Int
  totalCount: Int
}

union PagesComponentsDynamicZone =
    ComponentPageComponentHeader
  | ComponentPageComponentTestimonial
# Input type for dynamic zone components of Pages
scalar PagesComponentsDynamicZoneInput

type PagesConnection {
  values: [Pages]
  groupBy: PagesGroupBy
  aggregate: PagesAggregator
}

type PagesConnectionCreated_at {
  key: DateTime
  connection: PagesConnection
}

type PagesConnectionId {
  key: ID
  connection: PagesConnection
}

type PagesConnectionPublished_at {
  key: DateTime
  connection: PagesConnection
}

type PagesConnectionSlug {
  key: String
  connection: PagesConnection
}

type PagesConnectionTitle {
  key: String
  connection: PagesConnection
}

type PagesConnectionUpdated_at {
  key: DateTime
  connection: PagesConnection
}

type PagesGroupBy {
  id: [PagesConnectionId]
  created_at: [PagesConnectionCreated_at]
  updated_at: [PagesConnectionUpdated_at]
  Title: [PagesConnectionTitle]
  slug: [PagesConnectionSlug]
  published_at: [PagesConnectionPublished_at]
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  category(id: ID!, publicationState: PublicationState): Category
  categories(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Category]
  categoriesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): CategoryConnection
  page(id: ID!, publicationState: PublicationState): Pages
  pages(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Pages]
  pagesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): PagesConnection
  restaurant(id: ID!, publicationState: PublicationState): Restaurant
  restaurants(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Restaurant]
  restaurantsConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): RestaurantConnection
  files(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UploadFile]
  filesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  # Retrieve all the existing roles. You can't apply filters on this query.
  roles(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsRole]
  rolesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsUser]
  usersConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Restaurant {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String
  published_at: DateTime
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
}

type RestaurantAggregator {
  count: Int
  totalCount: Int
}

type RestaurantConnection {
  values: [Restaurant]
  groupBy: RestaurantGroupBy
  aggregate: RestaurantAggregator
}

type RestaurantConnectionCreated_at {
  key: DateTime
  connection: RestaurantConnection
}

type RestaurantConnectionDescription {
  key: String
  connection: RestaurantConnection
}

type RestaurantConnectionId {
  key: ID
  connection: RestaurantConnection
}

type RestaurantConnectionPublished_at {
  key: DateTime
  connection: RestaurantConnection
}

type RestaurantConnectionTitle {
  key: String
  connection: RestaurantConnection
}

type RestaurantConnectionUpdated_at {
  key: DateTime
  connection: RestaurantConnection
}

type RestaurantGroupBy {
  id: [RestaurantConnectionId]
  created_at: [RestaurantConnectionCreated_at]
  updated_at: [RestaurantConnectionUpdated_at]
  title: [RestaurantConnectionTitle]
  description: [RestaurantConnectionDescription]
  published_at: [RestaurantConnectionPublished_at]
}

input RestaurantInput {
  title: String!
  description: String
  categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

# A time string with format: HH:mm:ss.SSS
scalar Time

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Pages
}

input updateRestaurantInput {
  where: InputID
  data: editRestaurantInput
}

type updateRestaurantPayload {
  restaurant: Restaurant
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsPermission]
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

