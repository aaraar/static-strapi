input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  slug: String!
  body: String!
  published_at: DateTime
  users_permissions_users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleGroupBy {
  id: [ArticleConnectionId]
  created_at: [ArticleConnectionCreated_at]
  updated_at: [ArticleConnectionUpdated_at]
  title: [ArticleConnectionTitle]
  slug: [ArticleConnectionSlug]
  body: [ArticleConnectionBody]
  published_at: [ArticleConnectionPublished_at]
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionCreated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionUpdated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionSlug {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionBody {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionPublished_at {
  key: DateTime
  connection: ArticleConnection
}

input ArticleInput {
  title: String!
  slug: String!
  body: String!
  users_permissions_users: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArticleInput {
  title: String
  slug: String
  body: String
  users_permissions_users: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

union CaseBodyDynamicZone = ComponentOrganismsImageBanner | ComponentOrganismsInfoCard | ComponentOrganismsCards | ComponentOrganismsParagraph

"""Input type for dynamic zone body of Case"""
scalar CaseBodyDynamicZoneInput

type Case {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  subtitle: String
  slug: String
  info: ComponentOrganismsInfoCard
  body: [CaseBodyDynamicZone]
  published_at: DateTime
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
}

type CaseConnection {
  values: [Case]
  groupBy: CaseGroupBy
  aggregate: CaseAggregator
}

type CaseAggregator {
  count: Int
  totalCount: Int
}

type CaseGroupBy {
  id: [CaseConnectionId]
  created_at: [CaseConnectionCreated_at]
  updated_at: [CaseConnectionUpdated_at]
  title: [CaseConnectionTitle]
  subtitle: [CaseConnectionSubtitle]
  slug: [CaseConnectionSlug]
  info: [CaseConnectionInfo]
  published_at: [CaseConnectionPublished_at]
}

type CaseConnectionId {
  key: ID
  connection: CaseConnection
}

type CaseConnectionCreated_at {
  key: DateTime
  connection: CaseConnection
}

type CaseConnectionUpdated_at {
  key: DateTime
  connection: CaseConnection
}

type CaseConnectionTitle {
  key: String
  connection: CaseConnection
}

type CaseConnectionSubtitle {
  key: String
  connection: CaseConnection
}

type CaseConnectionSlug {
  key: String
  connection: CaseConnection
}

type CaseConnectionInfo {
  key: ID
  connection: CaseConnection
}

type CaseConnectionPublished_at {
  key: DateTime
  connection: CaseConnection
}

input CaseInput {
  title: String!
  subtitle: String
  slug: String
  categories: [ID]
  info: ComponentOrganismsInfoCardInput
  body: [CaseBodyDynamicZoneInput!]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCaseInput {
  title: String
  subtitle: String
  slug: String
  categories: [ID]
  info: editComponentOrganismsInfoCardInput
  body: [CaseBodyDynamicZoneInput!]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCaseInput {
  data: CaseInput
}

type createCasePayload {
  case: Case
}

input updateCaseInput {
  where: InputID
  data: editCaseInput
}

type updateCasePayload {
  case: Case
}

input deleteCaseInput {
  where: InputID
}

type deleteCasePayload {
  case: Case
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case]
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  title: [CategoryConnectionTitle]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionTitle {
  key: String
  connection: CategoryConnection
}

input CategoryInput {
  title: String!
  cases: [ID]
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  title: String
  cases: [ID]
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type Footer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  lists: [ComponentMoleculesUnorderedList]
  contact: String
  copyright: String
}

input FooterInput {
  lists: [ComponentMoleculesUnorderedListInput]
  contact: String
  copyright: String
  created_by: ID
  updated_by: ID
}

input editFooterInput {
  lists: [editComponentMoleculesUnorderedListInput]
  contact: String
  copyright: String
  created_by: ID
  updated_by: ID
}

input updateFooterInput {
  data: editFooterInput
}

type updateFooterPayload {
  footer: Footer
}

type deleteFooterPayload {
  footer: Footer
}

union PageComponentsDynamicZone = ComponentOrganismsHero | ComponentOrganismsImageBanner | ComponentOrganismsInfoCard | ComponentOrganismsCards | ComponentOrganismsParagraph | ComponentOrganismsLatestArticles | ComponentOrganismsCaseSelection

"""Input type for dynamic zone components of Page"""
scalar PageComponentsDynamicZoneInput

type Page {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  slug: String!
  components: [PageComponentsDynamicZone]!
  published_at: DateTime
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageAggregator {
  count: Int
  totalCount: Int
}

type PageGroupBy {
  id: [PageConnectionId]
  created_at: [PageConnectionCreated_at]
  updated_at: [PageConnectionUpdated_at]
  title: [PageConnectionTitle]
  slug: [PageConnectionSlug]
  published_at: [PageConnectionPublished_at]
}

type PageConnectionId {
  key: ID
  connection: PageConnection
}

type PageConnectionCreated_at {
  key: DateTime
  connection: PageConnection
}

type PageConnectionUpdated_at {
  key: DateTime
  connection: PageConnection
}

type PageConnectionTitle {
  key: String
  connection: PageConnection
}

type PageConnectionSlug {
  key: String
  connection: PageConnection
}

type PageConnectionPublished_at {
  key: DateTime
  connection: PageConnection
}

input PageInput {
  title: String!
  slug: String!
  components: [PageComponentsDynamicZoneInput!]!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPageInput {
  title: String
  slug: String
  components: [PageComponentsDynamicZoneInput!]!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentAtomsLink {
  id: ID!
  href: String!
  body: String!
}

input ComponentAtomsLinkInput {
  href: String!
  body: String!
}

input editComponentAtomsLinkInput {
  id: ID
  href: String
  body: String
}

type ComponentAtomsListItem {
  id: ID!
  title: String!
  text: String
}

input ComponentAtomsListItemInput {
  title: String!
  text: String
}

input editComponentAtomsListItemInput {
  id: ID
  title: String
  text: String
}

enum ENUM_COMPONENTMOLECULESBUTTON_COLOR {
  blue
  orange
  green
  red
  primary
  secondary
  tertiary
}

type ComponentMoleculesButton {
  id: ID!
  color: ENUM_COMPONENTMOLECULESBUTTON_COLOR!
  link: ComponentAtomsLink
}

input ComponentMoleculesButtonInput {
  color: ENUM_COMPONENTMOLECULESBUTTON_COLOR
  link: ComponentAtomsLinkInput
}

input editComponentMoleculesButtonInput {
  id: ID
  color: ENUM_COMPONENTMOLECULESBUTTON_COLOR
  link: editComponentAtomsLinkInput
}

type ComponentMoleculesCard {
  id: ID!
  title: String!
  body: String
  image: UploadFile
}

input ComponentMoleculesCardInput {
  title: String!
  body: String
  image: ID
}

input editComponentMoleculesCardInput {
  id: ID
  title: String
  body: String
  image: ID
}

type ComponentMoleculesUnorderedList {
  id: ID!
  items: [ComponentAtomsListItem]
}

input ComponentMoleculesUnorderedListInput {
  items: [ComponentAtomsListItemInput]
}

input editComponentMoleculesUnorderedListInput {
  id: ID
  items: [editComponentAtomsListItemInput]
}

type ComponentOrganismsCards {
  id: ID!
  items: [ComponentMoleculesCard]
}

input ComponentOrganismsCardInput {
  items: [ComponentMoleculesCardInput]
}

input editComponentOrganismsCardInput {
  id: ID
  items: [editComponentMoleculesCardInput]
}

type ComponentOrganismsCaseSelection {
  id: ID!
  title: String!
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case]
}

input ComponentOrganismsCaseSelectionInput {
  title: String!
  cases: [ID]
}

input editComponentOrganismsCaseSelectionInput {
  id: ID
  title: String
  cases: [ID]
}

type ComponentOrganismsHero {
  id: ID!
  title: String!
  body: String
  background_image: UploadFile
  call_to_action: [ComponentMoleculesButton]
}

input ComponentOrganismsHeroInput {
  title: String!
  body: String
  background_image: ID
  call_to_action: [ComponentMoleculesButtonInput]
}

input editComponentOrganismsHeroInput {
  id: ID
  title: String
  body: String
  background_image: ID
  call_to_action: [editComponentMoleculesButtonInput]
}

type ComponentOrganismsImageBanner {
  id: ID!
  title: String!
  image: UploadFile
}

input ComponentOrganismsImageBannerInput {
  title: String!
  image: ID
}

input editComponentOrganismsImageBannerInput {
  id: ID
  title: String
  image: ID
}

type ComponentOrganismsInfoCard {
  id: ID!
  title: String!
  body: String
  list: ComponentMoleculesUnorderedList
}

input ComponentOrganismsInfoCardInput {
  title: String!
  body: String
  list: ComponentMoleculesUnorderedListInput
}

input editComponentOrganismsInfoCardInput {
  id: ID
  title: String
  body: String
  list: editComponentMoleculesUnorderedListInput
}

type ComponentOrganismsLatestArticles {
  id: ID!
  title: String!
}

input ComponentOrganismsLatestArticleInput {
  title: String!
}

input editComponentOrganismsLatestArticleInput {
  id: ID
  title: String
}

type ComponentOrganismsParagraph {
  id: ID!
  title: String!
  body: String
  media: UploadFile
}

input ComponentOrganismsParagraphInput {
  title: String!
  body: String
  media: ID
}

input editComponentOrganismsParagraphInput {
  id: ID
  title: String
  body: String
  media: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Article | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnectionId | ArticleConnectionCreated_at | ArticleConnectionUpdated_at | ArticleConnectionTitle | ArticleConnectionSlug | ArticleConnectionBody | ArticleConnectionPublished_at | createArticlePayload | updateArticlePayload | deleteArticlePayload | Case | CaseConnection | CaseAggregator | CaseGroupBy | CaseConnectionId | CaseConnectionCreated_at | CaseConnectionUpdated_at | CaseConnectionTitle | CaseConnectionSubtitle | CaseConnectionSlug | CaseConnectionInfo | CaseConnectionPublished_at | createCasePayload | updateCasePayload | deleteCasePayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionTitle | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Footer | updateFooterPayload | deleteFooterPayload | Page | PageConnection | PageAggregator | PageGroupBy | PageConnectionId | PageConnectionCreated_at | PageConnectionUpdated_at | PageConnectionTitle | PageConnectionSlug | PageConnectionPublished_at | createPagePayload | updatePagePayload | deletePagePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentAtomsLink | ComponentAtomsListItem | ComponentMoleculesButton | ComponentMoleculesCard | ComponentMoleculesUnorderedList | ComponentOrganismsCards | ComponentOrganismsCaseSelection | ComponentOrganismsHero | ComponentOrganismsImageBanner | ComponentOrganismsInfoCard | ComponentOrganismsLatestArticles | ComponentOrganismsParagraph

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  article(id: ID!, publicationState: PublicationState): Article
  articles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  case(id: ID!, publicationState: PublicationState): Case
  cases(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Case]
  casesConnection(sort: String, limit: Int, start: Int, where: JSON): CaseConnection
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  footer(publicationState: PublicationState): Footer
  page(id: ID!, publicationState: PublicationState): Page
  pages(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createCase(input: createCaseInput): createCasePayload
  updateCase(input: updateCaseInput): updateCasePayload
  deleteCase(input: deleteCaseInput): deleteCasePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  updateFooter(input: updateFooterInput): updateFooterPayload
  deleteFooter: deleteFooterPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
